@page "/"
@using Domain
@using Kicker.Server.GameServer
@using System.Reactive.Linq
@inject GameService Service
@implements IDisposable

<PageTitle>admin tool</PageTitle>

<button class="btn btn-primary mb-4" @onclick="Service.Reset">zurücksetzen</button>

<div>
    <div class="mb-2 mt-3">
        <p>Spielfeldhöhe</p>
        <input type="number" @bind-value="_fieldHeight">
    </div>
    <div>
        <button class="btn btn-primary" @onclick="OnResetWithChangesClicked">Reset</button>
    </div>
</div>

<button class="btn btn-primary mt-4" @onclick="OnStopGameClicked">@(_isPaused ? "Continue" : "Pause")</button>

<input type="number" @bind="Speed"  />

<p>
    <image src="Blau-01.png" style="width: 20px; height: 40px;" />
    <input type="checkbox" @bind="_adessoPlayers[0]"/>
</p>

<p>
    <image src="Blau-02.png" style="width: 20px; height: 40px;" />
    <input type="checkbox" @bind="_adessoPlayers[1]"/>
</p>

<p>
    <image src="Blau-03.png" style="width: 20px; height: 40px;" />
    <input type="checkbox" @bind="_adessoPlayers[2]"/>
</p>

<p>
    <image src="Blau-04.png" style="width: 20px; height: 40px;" />
    <input type="checkbox" @bind="_adessoPlayers[3]"/>
</p>

<p>
    <image src="Blau-05.png" style="width: 20px; height: 40px;" />
    <input type="checkbox" @bind="_adessoPlayers[4]"/>
</p>

<p>
    <image src="Gelb-01.png" style="width: 20px; height: 40px;" />
    <input type="checkbox" @bind="_bvbPlayers[0]"/>
</p>

<p>
    <image src="Gelb-02.png" style="width: 20px; height: 40px;" />
    <input type="checkbox" @bind="_bvbPlayers[1]"/>
</p>

<p>
    <image src="Gelb-03.png" style="width: 20px; height: 40px;" />
    <input type="checkbox" @bind="_bvbPlayers[2]"/>
</p>

<p>
    <image src="Gelb-04.png" style="width: 20px; height: 40px;" />
    <input type="checkbox" @bind="_bvbPlayers[3]"/>
</p>

<p>
    <image src="Gelb-05.png" style="width: 20px; height: 40px;" />
    <input type="checkbox" @bind="_bvbPlayers[4]"/>
</p>


@code {
    
    private int _fieldHeight = 9;
    private IDisposable? _subscription;
    private bool _isPaused;
    
    private readonly bool[] _adessoPlayers = new bool[5];
    private readonly bool[] _bvbPlayers = new bool[5];

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _subscription = Service.Notifications
            .ObserveOn(SynchronizationContext.Current!)
            .Subscribe(HandleNotification);

        _adessoPlayers[0] = true;
        _bvbPlayers[0] = true;
    }

    private void HandleNotification(GameNotification notification)
    {
        switch (notification)
        {
            case GameNotification.State state:
                HandleState(state);
                break;
            case GameNotification.ResultNotification resultNotification:
                HandleResult(resultNotification.Item.Item2);
                break;
        }

        StateHasChanged();
    }

    private void HandleResult(CommandResult result)
    {
        switch (result)
        {
            case CommandResult.Moved:
                break;
            case var _ when result.IsPaused:
                _isPaused = true;
                break;
            case var _ when result.IsResumed:
                _isPaused = false;
                break;
        }
    }

    private bool HandleState(GameNotification.State state)
    {
        return _isPaused = state.Item.Status.Equals(GameStatus.StoppedByAdmin);
    }

    private void OnResetWithChangesClicked()
    {
        IEnumerable<Player> GetPlayers(IEnumerable<bool> p, Team team) => 
            p.Select((b, i) => (b,i)).Where(x => x.b).Select(x => new Player(team, x.i + 1));

        var adessoPlayers = GetPlayers(_adessoPlayers, Team.ADESSO);
        var bvbPlayers = GetPlayers(_bvbPlayers, Team.BVB);
        
        var players = adessoPlayers.Concat(bvbPlayers);
        var settings = GameSettings.create(_fieldHeight, 3).withPlayers(players);
        
        Service.Reset(settings);
    }
    
    private void OnStopGameClicked()
    {
        Service.Process(GameCommand.TogglePause);
    }

    public void Dispose()
    {
        _subscription?.Dispose();
    }

    public int Speed
    {
        get => (int) (Service.WaitDuration.TotalSeconds * 2);
        set => Service.WaitDuration = TimeSpan.FromSeconds(value / 2.0);
    }
}
